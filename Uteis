	 write(1, value[1], strlen(value[1])); // aqui eu uso o strlen como "buffer" do tamanho de value[1]
	 write(1, "\n", 1);

	 #define ABS(Value) ((Value) < 0 ? -(Value) : (Value)) // o "?" neste caso é o if (se verdadeiro) retorna -(value).
	 													   // o ":" neste caso é o else (se falso) retorna (value).
														   // esta é uma forma ternaria de utilizar o if e o else

while (*s1 && *s1 == *s2) // Esta é uma forma de dizer *s1 for != '\0' e se *s1 e *s2 forem iguais.
ver struct e typedef --> conceitos importantes

#pragma once // garante que o arquivo de cabecalho seja incluido apenas uma vez.

typedef //define "o tipo de estrutura" nesse casso struct
struct // é considerado um bloco contendo uma estrutura predefinida que voce pode acessar como quiser.
typedef struct Uteis
{
	/* data */
}; nomedastrutura // o nome da estrutura é usado junto com o typedef e evita que voce tenha que digitar struct e o nome em todo o momento.
// neste caso seria apenas chamar o nome da estrutura.

// Estudando o malloc
// as boas praticas diz que nao devemos utilizar o casting para o malloc.
// também diz que é redundante o "sizeof(char) uma vez que o char é 1 byte"
// isso quer dizer que que a sintaxe malloc(strlen(src) + 1); esta contando quantos bytes tem na string.
// malloc --> é uma funcao.
//(strlen(src)) --> chama a funcao strlen que conta o tamanho (quantos caracteres tem) da string src. Cada letra é 1 byte.
// + 1) --> aqui eu adiciono mais 1 byte para receber o '\0' que identifica o final da string.
// entao existem duas formas de se escrever o malloc:

char *ft_malloc(*string)
{
char *poiter;
poiter = malloc(strlen(string) + 1); // o pointer recebe atraves do malloc o tamanho igual da string (+1) que foi passada para dentro da funcao ft_malloc.
poiter = (char *)malloc((strlen(string) + 1) * sizeof(char);
// poiter recebe o casting do ponteiro de malloc (char *). O meio é igual. O final faz a multiplicacao pelo tamanho de um char "* sizeof(char)".
// O tamanho da string (strlen) * o tamanho de um chas (1 byte). ou seja hello (5 caracteres) * 1 = 5. Acrescenta mai 1 para o '\0' total = 6.
// por isso nao ha a necessidade de casting e nem de sizeof(char).
}

//// ---------------------->>>>>>>>>>>>>>>..
# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: rreal-de <rreal-de@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/10/16 21:06:38 by rreal-de          #+#    #+#              #
#    Updated: 2024/10/16 23:35:19 by rreal-de         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# ****************************************************************************	#
# NAME Define o nome da biblioteca estatica ".a"								#
# CC define o compilador a ser usado.											#
# Cflags define as flags de compilacao.											#
# SRC define o local e os arquivos .c 											#
# OBJ transforma os arquivos .c de SRC para .o 									#
# ****************************************************************************	#

NAME := libft.a
CC := gcc
CFLAGS := -Wall -Wextra -Werror
SRC := 	ft_isalpha
# ft_isdigit
#ft_isalnum
#isascii
#isprint
#strlen
#strlcpy
#strlcat
#strchr
#strrchr
#strncmp
#strnstr
#toupper
#tolower
#memset
#memcpy
#memmove
#memchr
#memcmp
#atoi
#bzero
#calloc
#strdup

OBJ := $(SRC: .c = .o)

# ***********************************************************************************	#
# ALL: Aqui comecam os "alvos" que é o que sera rodado com o comando make.				#
# $(NAME): $(OBJ) Aqui diz que o name depende de obj. 									#
# Essa linha garante entao que a biblioteca estatica esteja pronta antes de rodar. 		#
# O ar é a ferramenta que altera, cria ou extrai arquivos da biblioteca estatica (.a)	#
# O "r" insere ou altera os arquivos na biblioteca.										#
# O "c" cria a biblioteca caso ela nao exista											#
# O "s" cria um indice para a biblioteca que facilita a busca por simbolos				#
# $(NAME) $(OBJ) Aqui, lista os aquivos (obj) .o e insere na biblioteca (name) libft.a	#
# %.o: %.c Aqui fala que os arquivos .o dependem dos arquivos .c 						#
# $(CC) $(CFLAGS) -c $< -o $@ E aqui usa o compilador (CC) usando as flags (Cflags)		#
# para apenas compilar (-c) usando o nome do arquivo de origem ($<) para o alvo ($@)	#
# ***********************************************************************************	#


all: $(NAME)

$(NAME): $(OBJ)
		ar rcs $(NAME) $(OBJ)

%.o: %.c
		$(CC) $(CFLAGS) -c $< -o $@

# ***********************************************************************************	#
# Aqui é o alvo Clean. Nele é usado o comando rm para remover os arquivos (-f)			#
# criados como objeto (OBJ)
# ***********************************************************************************	#

clean:
		rm -f $(OBJ)


# ***********************************************************************************	#
# Aqui é o alvo Fclean que tem dependencia com o clean. Isso quer dizer que, antes de 	#
# fazer a acao do Fclean, ele faz primeiro a acao do clean.								#
# Nele é usado o comando rm para remover os arquivos (-f) criados da biblioteca (NAME)	#
# Ou seja, full clean - > remove primeiro os objetos e depois a biblioteca				#
# ***********************************************************************************	#

fclean: clean
		rm -f $(NAME)

# ***********************************************************************************	#
# O alvo re, recompila tudo. Ele chama primeiro o fclean, que por sua vez chama o clean #
# e depois chama o ALL para compilar novamente.											#
# ***********************************************************************************	#
re: fclean all

/*# ft_isdigit
#ft_isalnum
#isascii
#isprint
#strlen
#strlcpy
#strlcat
#strchr
#strrchr
#strncmp
#strnstr
#toupper
#tolower
#memset
#memcpy
#memmove
#memchr
#memcmp
#atoi
#bzero
#calloc
#strdup
*/


 gcc -Wall -Wextra -Werror strnlcpy.c -o a.out && ./a.out # comando utilizado para compilar e executar os mesmo tempo.
